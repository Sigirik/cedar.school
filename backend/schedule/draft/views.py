"""
schedule/draft/views.py
–§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–º –∞–∫—Ç–∏–≤–Ω—ã–º —á–µ—Ä–Ω–æ–≤–∏–∫–æ–º –Ω–µ–¥–µ–ª–∏ (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ –∏ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ).
"""
from django.utils.timezone import now
from rest_framework.decorators import api_view, permission_classes
from rest_framework.response import Response
from rest_framework.permissions import IsAuthenticated
from .models import TemplateWeekDraft
from .serializers import TemplateWeekDraftSerializer
from schedule.core.models import AcademicYear, LessonType
from schedule.template.models import TemplateWeek, TemplateLesson
from django.shortcuts import get_object_or_404
from schedule.validators.schedule_rules import check_collisions
from rest_framework import status

@api_view(['GET'])
@permission_classes([IsAuthenticated])
def get_or_create_draft(request):
    """
    –ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —á–µ—Ä–Ω–æ–≤–∏–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    draft, created = TemplateWeekDraft.objects.get_or_create(user=request.user)
    serializer = TemplateWeekDraftSerializer(draft)
    return Response(serializer.data)

@api_view(['POST'])
@permission_classes([IsAuthenticated])
def create_draft_from_template(request):
    """
    –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —á–µ—Ä–Ω–æ–≤–∏–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É–∫–∞–∑–∞–Ω–Ω–æ–π –Ω–µ–¥–µ–ª–∏ (–∏–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–π, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ).
    """
    template_id = request.data.get('template_id')
    if template_id:
        template = get_object_or_404(TemplateWeek, pk=template_id)
    else:
        template = TemplateWeek.objects.filter(is_active=True).first()
        if not template:
            return Response({"detail": "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –Ω–µ–¥–µ–ª–∏"}, status=400)

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —á–µ—Ä–Ω–æ–≤–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    TemplateWeekDraft.objects.filter(user=request.user).delete()
    # –ì–æ—Ç–æ–≤–∏–º —É—Ä–æ–∫–∏ (–ø–ª–æ—Å–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞)
    lessons = TemplateLesson.objects.filter(template_week=template)
    lessons_data = [
        {
            "id": l.id,
            "subject": l.subject_id,
            "grade": l.grade_id,
            "teacher": l.teacher_id,
            "day_of_week": l.day_of_week,
            "start_time": l.start_time.strftime("%H:%M") if l.start_time else None,
            "duration_minutes": l.duration_minutes,
            "type": l.type.key if l.type else None
        }
        for l in lessons
    ]
    draft = TemplateWeekDraft.objects.create(
        user=request.user,
        base_week=template,
        data={"lessons": lessons_data},
        change_history=[]
    )
    serializer = TemplateWeekDraftSerializer(draft)
    return Response(serializer.data)

@api_view(['POST'])
@permission_classes([IsAuthenticated])
def create_empty_draft(request):
    """
    –°–æ–∑–¥–∞—Ç—å –ø—É—Å—Ç–æ–π —á–µ—Ä–Ω–æ–≤–∏–∫ (–±–µ–∑ —É—Ä–æ–∫–æ–≤).
    """
    TemplateWeekDraft.objects.filter(user=request.user).delete()
    draft = TemplateWeekDraft.objects.create(
        user=request.user,
        data={"lessons": []},
        change_history=[]
    )
    serializer = TemplateWeekDraftSerializer(draft)
    return Response(serializer.data)

@api_view(['PATCH'])
@permission_classes([IsAuthenticated])
def update_draft(request):
    """
    –û–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —á–µ—Ä–Ω–æ–≤–∏–∫ (–∑–∞–º–µ–Ω—è–µ—Ç lessons —Ü–µ–ª–∏–∫–æ–º).
    """
    draft = get_object_or_404(TemplateWeekDraft, user=request.user)
    changes = request.data.get('data', {})
    draft.change_history.append(draft.data)
    draft.data = changes
    draft.save()
    serializer = TemplateWeekDraftSerializer(draft)
    return Response(serializer.data)

@api_view(['POST'])
@permission_classes([IsAuthenticated])
def commit_draft(request):
    """
    –ü—Ä–∏–º–µ–Ω–∏—Ç—å —á–µ—Ä–Ω–æ–≤–∏–∫ (–ø—É–±–ª–∏–∫–∞—Ü–∏—è –∫–∞–∫ –Ω–æ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ–π –Ω–µ–¥–µ–ª–∏, —Å–±—Ä–æ—Å —á–µ—Ä–Ω–æ–≤–∏–∫–∞).
    'type' –º–∞–ø–ø–∏—Ç—Å—è –≤ FK –Ω–∞ LessonType —á–µ—Ä–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–π —Ä–µ–∑–æ–ª–≤–µ—Ä (key/label).
    –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø -> 400 —Å –ø–æ–¥—Å–∫–∞–∑–∫–æ–π.
    """
    from django.db import transaction
    from rest_framework import status
    from rest_framework.exceptions import ValidationError
    from django.utils.timezone import now
    from django.shortcuts import get_object_or_404

    from .models import TemplateWeekDraft
    from schedule.core.models import AcademicYear, LessonType
    from schedule.template.models import TemplateWeek, TemplateLesson
    from schedule.core.services.lesson_type_lookup import get_lesson_type_or_400  # üëà –∫–ª—é—á–µ–≤–æ–µ

    draft = get_object_or_404(TemplateWeekDraft, user=request.user)
    lessons = (draft.data or {}).get("lessons", [])

    # –°–¥–µ–ª–∞–µ–º –≤—Å—ë –∞—Ç–æ–º–∞—Ä–Ω–æ
    with transaction.atomic():
        # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Å–µ –Ω–µ–¥–µ–ª–∏
        TemplateWeek.objects.filter(is_active=True).update(is_active=False)

        # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∞–∫—Ç–∏–≤–Ω—É—é –Ω–µ–¥–µ–ª—é
        week = TemplateWeek.objects.create(
            name=f"–®–∞–±–ª–æ–Ω –æ—Ç {now().date().isoformat()}",
            academic_year=draft.base_week.academic_year if draft.base_week else AcademicYear.objects.first(),
            is_active=True,
            description=f"–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {request.user.username}"
        )

        for l in lessons:
            # 1) –ï—Å–ª–∏ –ø—Ä–∏—à—ë–ª —è–≤–Ω—ã–π type_id ‚Äî –≤–∞–ª–∏–¥–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ.
            type_id = l.get("type_id")
            lt_obj = None
            if type_id is not None:
                lt_obj = LessonType.objects.filter(id=type_id).first()
                if lt_obj is None:
                    raise ValidationError({"type": f"LessonType id={type_id} –Ω–µ –Ω–∞–π–¥–µ–Ω."})
            else:
                # 2) –ò–Ω–∞—á–µ —Ä–µ–∑–æ–ª–≤–∏–º –ø–æ 'type' (—Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ {key|label}) ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ
                payload = l.get("type", None)
                lt_obj = get_lesson_type_or_400(payload)  # ‚Üê –≤–æ—Ç –Ω–∞—à –º–∞–ø–ø–∏–Ω–≥

            # –°–æ–∑–¥–∞—ë–º —É—Ä–æ–∫ (FK –ø–æ–ª–µ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è 'type')
            TemplateLesson.objects.create(
                template_week=week,
                grade_id=l["grade"],
                subject_id=l["subject"],
                teacher_id=l["teacher"],
                day_of_week=l["day_of_week"],
                start_time=l["start_time"],
                duration_minutes=l["duration_minutes"],
                type=lt_obj
            )

        # –°–±—Ä–æ—Å —á–µ—Ä–Ω–æ–≤–∏–∫–∞
        draft.data = {"lessons": []}
        draft.change_history = []
        draft.save()

    return Response({"detail": "–ß–µ—Ä–Ω–æ–≤–∏–∫ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω. –ù–µ–¥–µ–ª—è —Å–æ–∑–¥–∞–Ω–∞.", "week_id": week.id}, status=status.HTTP_201_CREATED)

@api_view(['GET'])
@permission_classes([IsAuthenticated])
def draft_exists(request):
    exists = TemplateWeekDraft.objects.filter(user=request.user).exists()
    return Response({ "exists": exists })

# –≤–µ—Ä–Ω—ë—Ç {lessons, collisions} –±–µ–∑ –∫–æ–º–º–∏—Ç–∞.
@api_view(['POST'])
@permission_classes([IsAuthenticated])
def validate_draft(request):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–ª–∏–∑–∏–π –±–µ–∑ –∫–æ–º–º–∏—Ç–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É—Ä–æ–∫–∏ + —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–±–ª–µ–º.
    """
    draft = get_object_or_404(TemplateWeekDraft, user=request.user)
    lessons = (draft.data or {}).get("lessons", [])
    collisions = check_collisions(lessons)

    return Response({
        "lessons": lessons,       # —Ñ—Ä–æ–Ω—Ç —É–∂–µ —É–º–µ–µ—Ç –≥–æ—Ç–æ–≤–∏—Ç—å –∏—Ö –∫ UI
        "collisions": collisions  # [{ type, resource_id?, weekday?, lesson_ids, severity, message }]
    }, status=status.HTTP_200_OK)
