from django.db import models
from django.conf import settings
#from datetime import timedelta, datetime
from django.core.exceptions import ValidationError


# –î–Ω–∏ –Ω–µ–¥–µ–ª–∏: –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–Ω—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
DAY_CHOICES = (
    (0, "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫"),
    (1, "–í—Ç–æ—Ä–Ω–∏–∫"),
    (2, "–°—Ä–µ–¥–∞"),
    (3, "–ß–µ—Ç–≤–µ—Ä–≥"),
    (4, "–ü—è—Ç–Ω–∏—Ü–∞"),
    (5, "–°—É–±–±–æ—Ç–∞"),
    (6, "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"),
)

WEEKDAYS = dict(DAY_CHOICES)

# –£—á–µ–±–Ω—ã–π –≥–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "2024‚Äì2025")
class AcademicYear(models.Model):
    name = models.CharField(max_length=20)  # –ù–∞–ø—Ä–∏–º–µ—Ä: 2024-2025

    def __str__(self):
        return self.name

# –ö–ª–∞—Å—Å (–≥—Ä—É–ø–ø–∞ —É—á–µ–Ω–∏–∫–æ–≤), –Ω–∞–ø—Ä–∏–º–µ—Ä: "5–ê", "9–ë"
class Grade(models.Model):
    name = models.CharField(max_length=100)  # –ù–∞–ø—Ä–∏–º–µ—Ä: "5–ê", "9–ë"

    def __str__(self):
        return self.name

# –£—á–µ–±–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç, –Ω–∞–ø—Ä–∏–º–µ—Ä: "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "–ò—Å—Ç–æ—Ä–∏—è"
class Subject(models.Model):
    name = models.CharField(max_length=100)  # –ù–∞–ø—Ä–∏–º–µ—Ä: "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "–ò—Å—Ç–æ—Ä–∏—è"

    def __str__(self):
        return self.name

# –ù–æ—Ä–º–∞ —á–∞—Å–æ–≤ –≤ –Ω–µ–¥–µ–ª—é –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∞—Å—Å–∞ (–ø–æ —É—á–µ–±–Ω–æ–º—É –ø–ª–∞–Ω—É)
class WeeklyNorm(models.Model):
    grade = models.ForeignKey(Grade, on_delete=models.CASCADE)
    subject = models.ForeignKey(Subject, on_delete=models.CASCADE)

    hours_per_week = models.PositiveSmallIntegerField(help_text="–í—Å–µ–≥–æ —á–∞—Å–æ–≤ –≤ –Ω–µ–¥–µ–ª—é –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É")
    lessons_per_week = models.PositiveSmallIntegerField(default=0, help_text="–£—Ä–æ–∫–æ–≤ —Å —É—á–∏—Ç–µ–ª–µ–º")
    courses_per_week = models.PositiveSmallIntegerField(default=0, help_text="–°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π (–∫—É—Ä—Å–æ–≤)")

    class Meta:
        unique_together = ("grade", "subject")
        ordering = ["grade", "subject"]

    def __str__(self):
        return f"{self.grade} ‚Äî {self.subject}: {self.hours_per_week} —á/–Ω–µ–¥"

# –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —É—á–∏—Ç–µ–ª—è –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏ –∏ –≤—Ä–µ–º–µ–Ω–∏ ‚Äî –¥–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
class TeacherAvailability(models.Model):
    teacher = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        on_delete=models.CASCADE,
        limit_choices_to={"role": "TEACHER"}  # –µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è
    )
    day_of_week = models.PositiveSmallIntegerField(choices=DAY_CHOICES)
    start_time = models.TimeField()
    end_time = models.TimeField()

    class Meta:
        unique_together = ("teacher", "day_of_week", "start_time", "end_time")
        ordering = ["teacher", "day_of_week", "start_time"]

    def __str__(self):
        return f"{self.teacher} ‚Äî {WEEKDAYS[self.day_of_week]}: {self.start_time}‚Äì{self.end_time}"

# –®–∞–±–ª–æ–Ω –Ω–µ–¥–µ–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ù–µ–¥–µ–ª—è ‚Ññ1") ‚Äî –æ—Å–Ω–æ–≤–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
class TemplateWeek(models.Model):
    name = models.CharField(max_length=100, help_text="–ù–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ù–µ–¥–µ–ª—è ‚Ññ1)")
    academic_year = models.ForeignKey(AcademicYear, on_delete=models.CASCADE)
    is_active = models.BooleanField(default=False)
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return self.name

# –£—Ä–æ–∫ –≤ —à–∞–±–ª–æ–Ω–µ –Ω–µ–¥–µ–ª–∏ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
class TemplateLesson(models.Model):
    template_week = models.ForeignKey(TemplateWeek, on_delete=models.CASCADE)
    grade = models.ForeignKey(Grade, on_delete=models.CASCADE)
    subject = models.ForeignKey(Subject, on_delete=models.CASCADE)
    teacher = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        on_delete=models.CASCADE,
        limit_choices_to={"role": "TEACHER"}
    )
    day_of_week = models.IntegerField(choices=DAY_CHOICES)
    start_time = models.TimeField()
    duration_minutes = models.PositiveIntegerField(default=45)

    class Meta:
        ordering = ["day_of_week", "start_time"]

    def __str__(self):
        return f"{self.template_week} | {self.grade} | {DAY_CHOICES[self.day_of_week][1]} {self.start_time} ‚Äî {self.subject}"

    def clean(self):
        from users.models import UserSubject, UserGrade
        user = self.teacher
        is_superuser = getattr(user, "is_superuser", False)
        role = getattr(user, "role", None)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞: –≤—Ö–æ–¥–∏—Ç –ª–∏ –¥–µ–Ω—å/–≤—Ä–µ–º—è –≤ –¥–æ—Å—Ç—É–ø–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        available = TeacherAvailability.objects.filter(
            teacher=user,
            day_of_week=self.day_of_week,
            start_time__lte=self.start_time,
            end_time__gte=self.get_end_time()
        ).exists()

        if not available:
            if is_superuser or role in ["DIRECTOR", "HEAD_TEACHER"]:
                print(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: {user} –≤–Ω–µ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏")
            else:
                raise ValidationError("–£—á–∏—Ç–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ —ç—Ç–æ –≤—Ä–µ–º—è")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞: –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –ø—Ä–µ–¥–º–µ—Ç—É
        if not UserSubject.objects.filter(teacher=self.teacher, subject=self.subject).exists():
            if is_superuser or role in ["DIRECTOR", "HEAD_TEACHER"]:
                print(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: {user} –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –ø—Ä–µ–¥–º–µ—Ç—É {self.subject}")
            else:
                raise ValidationError("–£—á–∏—Ç–µ–ª—å –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥–∞–Ω–Ω–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞: –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∫–ª–∞—Å—Å—É
        if not UserGrade.objects.filter(teacher=self.teacher, grade=self.grade).exists():
            if is_superuser or role in ["DIRECTOR", "HEAD_TEACHER"]:
                print(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: {user} –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∫–ª–∞—Å—Å—É {self.grade}")
            else:
                raise ValidationError("–£—á–∏—Ç–µ–ª—å –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥–∞–Ω–Ω–æ–º—É –∫–ª–∞—Å—Å—É")

    def get_end_time(self):
        from datetime import timedelta, datetime
        start = datetime.combine(datetime.today(), self.start_time)
        return (start + timedelta(minutes=self.duration_minutes)).time()

#–†–µ–∞–ª—å–Ω—ã–π —É—Ä–æ–∫ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
class RealLesson(models.Model):
    date = models.DateField()
    day_of_week = models.IntegerField(choices=DAY_CHOICES)
    subject = models.ForeignKey(Subject, on_delete=models.CASCADE)
    teacher = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        on_delete=models.CASCADE,
        limit_choices_to={"role": "TEACHER"}
    )
    grade = models.ForeignKey(Grade, on_delete=models.CASCADE)
    start_time = models.TimeField()
    duration_minutes = models.PositiveSmallIntegerField(default=45)
    topic = models.CharField(max_length=255, blank=True)
    theme_from_ktp = models.CharField(max_length=255, blank=True)
    template_lesson = models.ForeignKey('TemplateLesson', on_delete=models.SET_NULL, null=True, blank=True)

    class Meta:
        ordering = ["date", "start_time"]

    def __str__(self):
        return f"{self.date} {self.grade} ‚Äî {self.subject}"

    @property
    def end_time(self):
        from datetime import timedelta, datetime
        start = datetime.combine(self.date, self.start_time)
        return (start + timedelta(minutes=self.duration_minutes)).time()


# –®–∞–±–ª–æ–Ω –ö–¢–ü ‚Äî –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç —Ç–µ–º—É, –∫–ª–∞—Å—Å –∏ —É—á–µ–±–Ω—ã–π –≥–æ–¥.
# –ü—Ä–∏–º–µ—Ä: "–ö–¢–ü –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ 5–ê 2024‚Äì2025"
class KTPTemplate(models.Model):
    last_template_week_used = models.ForeignKey(
        'TemplateWeek', null=True, blank=True, on_delete=models.SET_NULL,
        help_text="–®–∞–±–ª–æ–Ω –Ω–µ–¥–µ–ª–∏, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ –±—ã–ª–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –¥–∞—Ç—ã"
    )

    subject = models.ForeignKey('Subject', on_delete=models.CASCADE, related_name='ktp_templates')
    grade = models.ForeignKey('Grade', on_delete=models.CASCADE, related_name='ktp_templates')
    academic_year = models.ForeignKey('AcademicYear', on_delete=models.CASCADE)
    name = models.CharField(max_length=255)  # –ù–∞–ø—Ä–∏–º–µ—Ä: "–ö–¢–ü –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ 5–ê"
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return self.name

# –†–∞–∑–¥–µ–ª –≤–Ω—É—Ç—Ä–∏ —à–∞–±–ª–æ–Ω–∞ –ö–¢–ü.
# –ü—Ä–∏–º–µ—Ä: "–¢–µ–º–∞ 1: –ù–∞—Ç—É—Ä–∞–ª—å–Ω—ã–µ —á–∏—Å–ª–∞", "–†–∞–∑–¥–µ–ª 2: –ì–µ–æ–º–µ—Ç—Ä–∏—è"
class KTPSection(models.Model):
    ktp_template = models.ForeignKey(KTPTemplate, on_delete=models.CASCADE, related_name='sections')
    title = models.CharField(max_length=255)
    description = models.TextField(blank=True, null=True)
    order = models.PositiveIntegerField()
    hours = models.PositiveIntegerField(default=0)  # üÜï –ö–æ–ª-–≤–æ —á–∞—Å–æ–≤ –≤ —Ä–∞–∑–¥–µ–ª–µ

    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        ordering = ['order']

    def __str__(self):
        return self.title

# –ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –ö–¢–ü ‚Äî –æ–¥–Ω–æ –∑–∞–Ω—è—Ç–∏–µ/—É—Ä–æ–∫.
# –ü—Ä–∏–º–µ—Ä: "–£—Ä–æ–∫ 1: –°–ª–æ–∂–µ–Ω–∏–µ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª"
class KTPEntry(models.Model):
    LESSON_TYPE_CHOICES = [
        ('lesson', '–£—Ä–æ–∫'),
        ('course', '–ö—É—Ä—Å'),
    ]

    section = models.ForeignKey(KTPSection, on_delete=models.CASCADE, related_name='entries')
    lesson_number = models.PositiveIntegerField(default=1)  # üÜï –ù–æ–º–µ—Ä —É—Ä–æ–∫–∞ –≤ —Ä–∞–∑–¥–µ–ª–µ
    type = models.CharField(max_length=10, choices=LESSON_TYPE_CHOICES, default='lesson')  # üÜï –¢–∏–ø –∑–∞–ø–∏—Å–∏

    planned_date = models.DateField(blank=True, null=True)  # üÜï –î–∞—Ç–∞ –ø–æ –ø–ª–∞–Ω—É
    actual_date = models.DateField(blank=True, null=True)  # üÜï –î–∞—Ç–∞ –ø–æ —Ñ–∞–∫—Ç—É

    title = models.CharField(max_length=255)
    objectives = models.TextField(blank=True, null=True)
    tasks = models.TextField(blank=True, null=True)
    homework = models.TextField(blank=True, null=True)
    materials = models.TextField(blank=True, null=True)

    planned_outcomes = models.TextField(blank=True, null=True)  # üÜï –ü–ª–∞–Ω–∏—Ä—É–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    motivation = models.TextField(blank=True, null=True)        # üÜï –ú–æ—Ç–∏–≤–∞—Ü–∏—è

    order = models.PositiveIntegerField()

    template_lesson = models.ForeignKey(
        'TemplateLesson',  # —Å—Ç—Ä–æ–∫–æ–π ‚Äî –µ—Å–ª–∏ TemplateLesson –Ω–∏–∂–µ –≤ —Ñ–∞–π–ª–µ
        on_delete=models.SET_NULL,
        null=True,
        blank=True
    )

    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        ordering = ['order']

    def __str__(self):
        return self.title

class TemplateWeekDraft(models.Model):
    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)
    base_week = models.ForeignKey(TemplateWeek, on_delete=models.CASCADE)
    data = models.JSONField()
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return f"Draft by {self.user} for {self.base_week.name}"
