services:
  # ===== BETA =====
  api-beta:
    container_name: cedar-api-beta
    build:
      context: ../..
      dockerfile: deploy/compose/backend.Dockerfile
    env_file:
      - .env.beta
    depends_on:
      pg-beta:
        condition: service_healthy
    ports:
      - "127.0.0.1:5201:8000"         # ← ОБЯЗАТЕЛЬНО
    command: >
      bash -lc 'python manage.py migrate --noinput &&
                gunicorn config.wsgi:application -c deploy/compose/gunicorn.conf.py'
    networks: [cedar_internal]
    restart: unless-stopped
    logging:
      driver: json-file
      options: { max-size: "10m", max-file: "5" }


  front-beta:
    container_name: cedar-front-beta
    build:
      context: ../..
      dockerfile: deploy/compose/Dockerfile.front
      args:
        VITE_API_BASE: ${VITE_API_BASE}     # ← одно и то же имя
    env_file:
      - .env.front-beta
    environment:
      VITE_API_BASE: ${VITE_API_BASE}       # ← (если делаешь envsubst/скрипты)
    ports:
      - "127.0.0.1:5101:80"
    volumes:
      - ./nginx-site.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on: [api-beta]
    networks: [cedar_public, cedar_internal]
    restart: unless-stopped
    logging:
      driver: json-file
      options: { max-size: "10m", max-file: "5" }

  pg-beta:
    image: postgres:15
    container_name: cedar-pg-beta
    env_file: [.env.beta]
    volumes:
      - pgdata_beta:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 3s
      retries: 30
    networks: [cedar_internal]
    restart: unless-stopped
  # ===== DEV =====
  pg-dev:
    image: postgres:15
    container_name: cedar-pg-dev
    restart: unless-stopped
    env_file:
      - .env.dev
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - pgdata_dev:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 3s
      retries: 30
    networks:
      - cedar_internal

  api-dev:
    build:
      context: ../..
      dockerfile: deploy/compose/backend.Dockerfile
    container_name: cedar-api-dev
    restart: unless-stopped
    env_file:
      - .env.dev
    depends_on:
      pg-dev:
        condition: service_healthy
    ports:
      - "127.0.0.1:5401:8000"      # системный nginx -> 127.0.0.1:5401
    command: >
      bash -lc 'python manage.py migrate --noinput &&
                gunicorn config.wsgi:application -c deploy/compose/gunicorn.conf.py'
    networks:
      - cedar_internal
    # volumes:
    #   - static_dev:/app/staticfiles
    #   - media_dev:/app/media

  # (опц.) фронт для DEV — под профилем
  front-dev:
    build:
      context: ../..
      dockerfile: deploy/compose/Dockerfile.front
      args:
        VITE_API_BASE ${VITE_API_BASE}
    container_name: cedar-front-dev
    restart: unless-stopped
    env_file:
      - .env.front-dev
    environment:
      VITE_API_BASE: ${VITE_API_BASE}
    ports:
      - "127.0.0.1:5001:80"        # системный nginx -> 127.0.0.1:5001
    volumes:
      - ./nginx-site.dev.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - api-dev
    networks:
      - cedar_public
      - cedar_internal
    profiles: ["dev-front"]

volumes:
  pgdata_beta:
  pgdata_dev:
  # static_beta:
  # media_beta:
  # static_dev:
  # media_dev:

networks:
  cedar_internal:
    driver: bridge
    internal: true     # изолированная сеть (нет выхода наружу)
  cedar_public:
    driver: bridge
